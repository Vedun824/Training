print('привет')
print('привет')
print('привет')
print('привет')
print('привет')
# Стартовый пример где мы не используем циклы а выводим "привет" через повторение команды "print"

for x in range(0, 5):
    print('привет')
# Пример применения функции "for" и функции range для создания списка чисел (диапазона (0,5)

print(list(range(10, 20)))
# В этом примере показана работа итератора и функций-range,list для получения списка чисел.

for x in range (0, 5):
    print('привет %s' % x)
# Пример с сохранением каждого нового полученного значения в переменной "х"

x = 0
print('привет %s' % x)
x = 1
print('привет %s' % x)
x = 2
print('привет %s' % x)
x = 3
print('привет %s' % x)
x = 4
print('привет %s' % x)
# Пример где показано как бы выглядел код если бы мы не использовали цикл "for" и присваивали значение переменной
# через новую строку.


wizard_list = ['паучьи лапки', 'жабий палец', 'язык улитки', 'крыло летучей мыши', 'жир слизня', 'медвежий коготь']
for i in wizard_list:
    print(i)
# Пример где мы используем функцию "for" для списка. Тут мы сохраняем каждое значение списка в переменной (i) и выводим это на экран.


wizard_list = ['паучьи лапки', 'жабий палец', 'язык улитки', 'крыло летучей мыши', 'жир слизня', 'медвежий коготь']
print(wizard_list[0])
print(wizard_list[1])
print(wizard_list[2])
print(wizard_list[3])
print(wizard_list[4])
print(wizard_list[5])
# Пример как бы выглядел код со списком без использования цикла "for"


hugehairpants = ['огромные', 'волосатые', 'штаны']
for i in hugehairpants:
    print(i)
    print(i)
# Пример где мы с помощью цикла "for" и двух команд "print (i)" Выводим список дважды (по принципу 1-1,2-2,3-3)
# Важно помнить что при смещении строки в блоке даже на 1 пробел код не будет выведен получив "ошибку выравнивания"


hugehairpants = ['огромные', 'волосатые', 'штаны']
for i in hugehairpants:
    print(i)                          #
    for j in hugehairpants:           # Эти строки находятся в первом блоке
        print(j)                      # Эта строка находится так-же и во втором блоке.
# Тут показан пример цикла с двумя блоками кода,где изначально выполняется цикл с блоком (print (i))
# после чего  выполняется цикл (print (j)) в следствии чего первый цикл исполняется перебором элементов используя
# по очереди каждый из элементов по принципу (1-2-2-2-3-2)


found_coins = 20
magic_coins = 70
stolen_coins = 3
coins = found_coins # Присвоение переменной coins значения found_coins
for week in range (1, 53): # Начало цикла for с переменой week в которую будут суммироваться значения из выполняемого блока.
    coins = coins + magic_coins - stolen_coins # 1. Исполняемый блок значения суммирования которого будут
    print('неделя %s = %s' % (week, coins))    # 2. попадать в переменную week вплоть до окончания указанного диапазона в начале цикла.


for step in range(0, 20): # Цикл for рассчитан на опр кол-во повторов.
    print(step)


# step = 0 Создание переменной с присвоением значения.
# while step <10000: Цикл while с заданным условием проверки используя оператор меньше (<) и значение 10000
    # print(step) Вывод номера ступеньки (шага)
    # if tired == True: Проверка с помощью (if)  переменной (tired) (True в языке означает истину и является булевым значением)
        # break Если (tired == True) то мы выходим с цикла с помощью (break)
    # elif: badweather == True:
    # break
# else: Если ни (tired) ни (badweather) не равны выполнится строчка после (else) где мы прибавим 1 к значению (step)
    # step = step+1 И цикл пойдёт на новый повтор.
    # ДАННЫЙ ЗАКОМЕНТИРОВАННЫЙ КОД НЕ СРАБОТАЕТ ТАК-КАК НЕ СОЗДАНЫ ПЕРЕМЕННЫЕ: (tired-badweather) И ЯВЛЯЕТСЯ ЛИШЬ ПРИМЕРОМ.


x = 45 # Создание первой переменной.
y = 80 # Создание второй переменной.
while x < 50 and y < 100: # Старт цикла (while) с двумя условиями проверки (x < 50 и y < 100)
    x = x + 1 # Показано увеличение переменной (x) на +1 при каждом повторе цикла
    y = y + 1 # Показано увеличение переменной (y) на +1 при каждом повторе цикла
    print(x, y)
















