print(8 * 3.57)
# Вычисление с использованием оператора (* Умножение)

print(10 * 365)
print(3650 + 20)
# Повторение вычислений с использование операторов (* + Сложение)

print(3 * 52)
print(3670 - 156)
# Продолжаем использование операторов на примере (* - Вычитание)

print(3514 / 5)
# Использование вычисления с оператором Деление (/)

print(5 + 30 * 20)
# Пример вычисления с приоритетом одного из операторов (В данном случае показан пример с приоритетом * над оператором + при выполнении операции)

print((5 + 30) * 20)
# Пример вычисления где скобками выделяется область которая будет выполнена первой в обход приоритета операторов ( * / над операторами + -) закрытие через двойные скобки.

print(((5 + 30) * 20) / 10)
# Пример вычисления с использованием вложенных скобок где сначала выполняется выражение во внутренних скобках (5+30) затем во внешних (*20) и затем (/10)

print(((30 * 20) / 10) + 5)
# Пример выражения указанный в книге 5+30*20/10 не может быть обработан PyCharm так-как команда print в данном случае не может обработать указанный пример (требуется изменение выражения по указанному выше примеру с заключением его в множественные скобки) для получения нужного результата.

fred = 100
print(fred)
# Пример переменной "fred" и применение к ней значения "100" и вывод этой переменной через print(fred)

fred = 200
print(fred)
# Пример изменения значения переменной с "100" на "200"

fred = 200
john = fred
print(john)
# Пример когда переменной "fred" присваивается значение "200" и в тоже время переменной "john" присваивается переменная "fred" которая равна "200" на основе чего команда print выведет именно значение "200"

number_of_coins = 200
print(number_of_coins)
# Присвоение переменной другого имени

print(((10 * 365) + 20) - 3 * 52)
#  Пример сложного решения из книги: print 20 + 10 * 365, print 3 * 52 print 3670 - 156 В PyCharm требуеутся закрыть указанные варианты в скобки)
#  Второй пример прописывания этого же выражения в однострочном варианте выглядит как: 20 + 10 * 365 – 3 * 52 в Pycharm данное выражение требует корректировки по указанному выше варианту.

found_coins = 20
magic_coins = 10
stolen_coins = 3
print(((magic_coins * 365) + found_coins) - stolen_coins * 52)
# Использование выражения с текстовыми переменными и присвоением им цифровых и использование их же для вывода результата выражения (Указанный в книге вариант требует корректировки found_coins + magic_coins * 365 — stolen_coins * 52)


